pipeline {
    agent none

    options {
        parallelsAlwaysFailFast()
        disableConcurrentBuilds()
    }

    stages {
        stage('Build') {
            parallel {
               // stage ('linux') {
               //     agent { label 'master' }
               //     steps {
               //         step([$class: 'WsCleanup'])
               //         checkout scm
               //         sh '''
               //             qmake gams-cpp.pro && make -j4
               //         '''
               //     }
               //     post {
               //         always {
               //             recordIssues aggregatingResults: true, enabledForFailure: true, tools: [gcc4(reportEncoding: 'UTF-8')]
               //             recordIssues enabledForFailure: true, tools: [taskScanner(ignoreCase: true, includePattern: '**/*.c, **/*.cpp, **/*.h, **/*.pro, **/*.pri', normalTags: 'TODO')]
               //         }
               //     }
               // }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS2017 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build"
                            call vcvars64.bat
                            set
                            cd %WORKSPACE%
                            qmake gams-cpp.pro "CONFIG+=release"
                            nmake
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [msBuild(id: 'windowsX64', name: 'MSBuild-x64', reportEncoding: 'UTF-8')]
                        }
                    }
                }
              //  stage ('macos') {
              //      agent { label 'macos' }
              //      steps {
              //          step([$class: 'WsCleanup'])
              //          checkout scm
              //          sh 'qmake gams-cpp.pro && make -j4'
              //      }
              //      post {
              //          always {
              //              recordIssues aggregatingResults: true, enabledForFailure: true, tools: [clang(reportEncoding: 'UTF-8')]
              //          }
              //      }
              //  }
            }
        }
        stage('Test') {
            parallel {
               // stage ('linux') {
               //     agent { label 'master' }
               //     steps {
               //         sh '''
               //             mkdir reports
               //             export LD_LIBRARY_PATH=$WORKSPACE/bin:$LD_LIBRARY_PATH
               //             cd tests/bin
               //             for f in *; do
               //                 ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
               //             done
               //         '''
               //     }
               //     post {
               //         always {
               //             junit allowEmptyResults: true, testResults: 'reports/*.xml'
               //         }
               //     }
               // }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        bat '''
                            mkdir reports
                            set PATH=%WORKSPACE%/bin;%PATH%
                            cd tests/bin
                            for %%f in (*) do %%f -xunitxml -o %WORKSPACE%/reports/%%f.xml
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
              //  stage ('macos') {
              //      agent { label 'macos' }
              //      steps {
              //          sh '''
              //              mkdir reports
              //              export DYLD_LIBRARY_PATH=$WORKSPACE/bin:$DYLD_LIBRARY_PATH
              //              cd tests/bin
              //              for f in *; do
              //                  ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
              //              done
              //          '''
              //      }
              //      post {
              //          always {
              //              junit allowEmptyResults: true, testResults: 'reports/*.xml'
              //          }
              //      }
              //  }
            }
        }
//        stage('Deploy') {
//            agent { label 'master' }
//            when {
//                expression { return currentBuild.currentResult == "SUCCESS" }
//                tag pattern: "v\\d+\\.\\d+\\.\\d+.*", comparator: "REGEXP"
//            }
//            steps {
//                withCredentials([string(credentialsId: '18e8f0e0-f27a-4358-b70f-04acec1e9617', variable: 'GITHUB_TOKEN')]) {
//                    sh '''#!/bin/bash -xe
//                        ## get version information for artifact, tag name and description
//                        GAMSCPP_MAJOR_VERSION=$(grep ^GAMSCPP_MAJOR_VERSION version | cut -f2 -d"=")
//                        GAMSCPP_MINOR_VERSION=$(grep ^GAMSCPP_MINOR_VERSION version | cut -f2 -d"=")
//                        GAMSCPP_PATCH_LEVEL=$(grep ^GAMSCPP_PATCH_LEVEL version | cut -f2 -d"=")
//                        export GAMSCPP_VERSION=$GAMSCPP_MAJOR_VERSION.$GAMSCPP_MINOR_VERSION.$GAMSCPP_PATCH_LEVEL
//                        GAMS_DISTRIB_MAJOR_VERSION=$(grep ^GAMS_DISTRIB_MAJOR version | cut -f2 -d"=")
//                        GAMS_DISTRIB_MINOR_VERSION=$(grep ^GAMS_DISTRIB_MINOR version | cut -f2 -d"=")
//                        export GAMS_DISTRIB_VERSION=$GAMS_DISTRIB_MAJOR_VERSION.$GAMS_DISTRIB_MINOR_VERSION
//
//                        CHANGELOG=""
//
//                        foundFirst="false"
//                        while IFS="" read -r line
//                        do
//                            if [[ $line =~ ^Version.* ]] && [[ $foundFirst == "true" ]]; then
//                                break
//                            elif [[ $line =~ ^Version.* ]]; then
//                                CHANGELOG+=$line$'\n'
//                                foundFirst="true"
//                            else
//                                CHANGELOG+=$line$'\n'
//                            fi
//                        done < CHANGELOG
//
//                        ## GitHub parameters
//                        export GITHUB_TOKEN=${GITHUB_TOKEN}
//                        GITHUB_RELEASE_ADDRESS="https://github.com/GAMS-dev/studio/releases/tag/${TAG_NAME}"
//                        GITHUB_ORGA=GAMS-dev
//                        GITHUB_REPO=gams-cpp
//
//                        ## delete old release if needed
//                        RELEASE_DELETED=0
//                        github-release delete --user $GITHUB_ORGA --repo $GITHUB_REPO --tag ${TAG_NAME} && RELEASE_DELETED=0 || RELEASE_DELETED=1
//                        if [[ $RELEASE_DELETED -eq 0 ]]; then
//                          echo "Release deleted"
//                        else
//                          echo "No release to delete"
//                        fi
//
//                        ## create a GitHub release
//                        github-release release --user $GITHUB_ORGA --repo $GITHUB_REPO --tag ${TAG_NAME} --pre-release \
//--description "${CHANGELOG}
//
//This new version of the GAMS C++ API is part of the latest GAMS ${GAMS_DISTRIB_VERSION} release. To download GAMS, please visit https://www.gams.com/latest/. To learn more about the GAMS C++ API, please visit https://www.gams.com/latest/docs/API_CPP_OVERVIEW.html"
//                    '''
//                }
//            }
//        }
    }
}
