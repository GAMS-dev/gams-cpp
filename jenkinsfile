def GAMS_FOR_LINUX = "/opt/gams/gams36.0_linux_x64_64_sfx"
def GAMS_FOR_MACOS = "/Library/Frameworks/GAMS.framework/Versions/36/Resources"
def GAMS_FOR_WINDOWS = "C:\\GAMS\\36"

pipeline {
    agent none

    options {
        parallelsAlwaysFailFast()
        disableConcurrentBuilds()
    }

    stages {
        stage('Build') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    environment {
                        GAMS_CORE_PATH="${GAMS_FOR_LINUX}"
                        PATH="${GAMS_FOR_LINUX}:${PATH}"
                    }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        cmakeBuild buildDir: 'build', installation: 'InSearchPath', steps: [[args: '-j4']]
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [gcc4(reportEncoding: 'UTF-8')]
                            recordIssues enabledForFailure: true, tools: [taskScanner(ignoreCase: true, includePattern: '**/*.c, **/*.cpp, **/*.h, **/*.txt, **/*.cmake', normalTags: 'TODO')]
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    environment {
                        GAMS_CORE_PATH="${GAMS_FOR_WINDOWS}"
                        PATH="${GAMS_FOR_WINDOWS};${PATH}"
                        NO_WINDOWS_REGISTRY=1
                    }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS2019 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build"
                            call vcvars64.bat
                            set
                            cd %WORKSPACE%
                            mkdir build
                            cd build
                            cmake -G "NMake Makefiles" ..
                            nmake
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [msBuild(id: 'windowsX64', name: 'MSBuild-x64', reportEncoding: 'UTF-8')]
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    environment {
                        GAMS_CORE_PATH="${GAMS_FOR_MACOS}"
                        PATH="${GAMS_FOR_MACOS}:${PATH}"
                    }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        cmakeBuild buildDir: 'build', installation: 'InSearchPath', steps: [[args: '-j4']]
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [clang(reportEncoding: 'UTF-8')]
                        }
                    }
                }
            }
        }
        stage('Test') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    environment {
                        PATH="${GAMS_FOR_LINUX}:${PATH}"
                    }
                    steps {
                        ctest ignoredExitCodes: '1-65535', installation: 'InSearchPath', workingDir: 'build'
                    }
                    //post { // TODO
                    //    always {
                    //        xunit([CTest(excludesPattern: '', pattern: 'build/Testing/**/LastTest.log', stopProcessingIfError: true)])
                    //        archiveArtifacts artifacts: 'build/Testing/**/LastTest.log', fingerprint: true
                    //    }
                    //}
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    environment {
                        PATH="${GAMS_FOR_WINDOWS};${PATH}"
                    }
                    steps {
                        bat '''
                            cd build
                            dir
                        '''
                        // TODO ctest missing on Windows
                        //ctest ignoredExitCodes: '1-65535', installation: 'InSearchPath', workingDir: 'build'
                        //bat ' ctest --version '
                    }
                    //post { // TODO
                    //    always {
                    //        junit allowEmptyResults: true, testResults: 'reports/*.xml'
                    //        archiveArtifacts artifacts: 'reports/*.xml', fingerprint: true
                    //    }
                    //}
                }
                stage ('macos') {
                    agent { label 'macos' }
                    environment {
                        PATH="${GAMS_FOR_MACOS}:${PATH}"
                    }
                    steps {
                        ctest ignoredExitCodes: '1-65535', installation: 'InSearchPath', workingDir: 'build'
                    }
                    //post { // TODO
                    //    always {
                    //        archiveArtifacts artifacts: 'build/Testing/**/LastTest.log', fingerprint: true
                    //    }
                    //}
                }
            }
        }
        stage('Deploy') {
            agent { label 'master' }
            when {
                expression { return currentBuild.currentResult == "SUCCESS" }
                tag pattern: "v\\d+\\.\\d+\\.\\d+.*", comparator: "REGEXP"
            }
            steps {
                withCredentials([string(credentialsId: '18e8f0e0-f27a-4358-b70f-04acec1e9617', variable: 'GITHUB_TOKEN')]) {
                    sh '''#!/bin/bash -xe
                        ## get version information for artifact, tag name and description
                        GAMSCPP_MAJOR_VERSION=$(grep ^GAMSCPP_MAJOR_VERSION version | cut -f2 -d"=")
                        GAMSCPP_MINOR_VERSION=$(grep ^GAMSCPP_MINOR_VERSION version | cut -f2 -d"=")
                        GAMSCPP_PATCH_LEVEL=$(grep ^GAMSCPP_PATCH_LEVEL version | cut -f2 -d"=")
                        export GAMSCPP_VERSION=$GAMSCPP_MAJOR_VERSION.$GAMSCPP_MINOR_VERSION.$GAMSCPP_PATCH_LEVEL
                        GAMS_DISTRIB_MAJOR_VERSION=$(grep ^GAMS_DISTRIB_MAJOR version | cut -f2 -d"=")
                        GAMS_DISTRIB_MINOR_VERSION=$(grep ^GAMS_DISTRIB_MINOR version | cut -f2 -d"=")
                        export GAMS_DISTRIB_VERSION=$GAMS_DISTRIB_MAJOR_VERSION.$GAMS_DISTRIB_MINOR_VERSION

                        CHANGELOG=""

                        foundFirst="false"
                        while IFS="" read -r line
                        do
                            if [[ $line =~ ^Version.* ]] && [[ $foundFirst == "true" ]]; then
                                break
                            elif [[ $line =~ ^Version.* ]]; then
                                CHANGELOG+=$line$'\n'
                                foundFirst="true"
                            else
                                CHANGELOG+=$line$'\n'
                            fi
                        done < CHANGELOG

                        ## GitHub parameters
                        export GITHUB_TOKEN=${GITHUB_TOKEN}
                        GITHUB_RELEASE_ADDRESS="https://github.com/GAMS-dev/studio/releases/tag/${TAG_NAME}"
                        GITHUB_ORGA=GAMS-dev
                        GITHUB_REPO=gams-cpp

                        ## delete old release if needed
                        RELEASE_DELETED=0
                        github-release delete --user $GITHUB_ORGA --repo $GITHUB_REPO --tag ${TAG_NAME} && RELEASE_DELETED=0 || RELEASE_DELETED=1
                        if [[ $RELEASE_DELETED -eq 0 ]]; then
                          echo "Release deleted"
                        else
                          echo "No release to delete"
                        fi

                        ## create a GitHub release
                        github-release release --user $GITHUB_ORGA --repo $GITHUB_REPO --tag ${TAG_NAME} --pre-release \
--description "${CHANGELOG}

This new version of the GAMS C++ API is part of the latest GAMS ${GAMS_DISTRIB_VERSION} release. To download GAMS, please visit https://www.gams.com/latest/. To learn more about the GAMS C++ API, please visit https://www.gams.com/latest/docs/API_CPP_OVERVIEW.html"
                    '''
                }
            }
        }
    }
}
