pipeline {
    agent none

    options {
        parallelsAlwaysFailFast()
        disableConcurrentBuilds()
    }

    stages {
        stage('Build') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh '''
                            qmake gams-cpp.pro && make -j4
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [gcc4(reportEncoding: 'UTF-8')]
                            recordIssues enabledForFailure: true, tools: [taskScanner(ignoreCase: true, includePattern: '**/*.c, **/*.cpp, **/*.h, **/*.pro, **/*.pri', normalTags: 'TODO')]
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        bat '''
                            @echo off
                            echo Setting up environment for VS2017 usage...
                            cd "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build"
                            call vcvars64.bat
                            set
                            cd %WORKSPACE%
                            qmake gams-cpp.pro "CONFIG+=release"
                            nmake
                        '''
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [msBuild(id: 'windowsX64', name: 'MSBuild-x64', reportEncoding: 'UTF-8')]
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    steps {
                        step([$class: 'WsCleanup'])
                        checkout scm
                        sh 'qmake gams-cpp.pro && make -j4'
                    }
                    post {
                        always {
                            recordIssues aggregatingResults: true, enabledForFailure: true, tools: [clang(reportEncoding: 'UTF-8')]
                        }
                    }
                }
            }
        }
        stage('Test') {
            parallel {
                stage ('linux') {
                    agent { label 'master' }
                    steps {
                        sh '''
                            mkdir reports
                            export LD_LIBRARY_PATH=$WORKSPACE/bin:$LD_LIBRARY_PATH
                            cd tests/bin
                            for f in *; do
                                ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
                            done
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('windowsX64') {
                    agent { label 'windowsX64' }
                    steps {
                        bat '''
                            mkdir reports
                            set PATH=%WORKSPACE%/bin;%PATH%
                            cd tests/bin
                            for %%f in (*) do %%f -xunitxml -o %WORKSPACE%/reports/%%f.xml
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
                stage ('macos') {
                    agent { label 'macos' }
                    steps {
                        sh '''
                            mkdir reports
                            export DYLD_LIBRARY_PATH=$WORKSPACE/bin:$DYLD_LIBRARY_PATH
                            cd tests/bin
                            for f in *; do
                                ./$f -xunitxml -o $WORKSPACE/reports/$f.xml
                            done
                        '''
                    }
                    post {
                        always {
                            junit allowEmptyResults: true, testResults: 'reports/*.xml'
                        }
                    }
                }
            }
        }
    }
}
